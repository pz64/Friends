name: Publish


on:
  push:
    branches: [ "main" ]

jobs:
  unitTest:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run microtests
        run: ./gradlew clean testDebug

  #  provideTestApk:
  #    name: Instrumentation tests
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v3
  #
  #      - name: set up JDK 11
  #        uses: actions/setup-java@v3
  #        with:
  #          java-version: '11'
  #          distribution: 'temurin'
  #          cache: gradle
  #
  #      - name: Grant execute permission for gradlew
  #        run: chmod +x gradlew
  #
  #      - name: Assemble app debug APK
  #        run: ./gradlew assembleDebug
  #
  #      - name: Upload APK
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: app-debug
  #          path: app/build/outputs/apk/debug/app-debug.apk
  #
  #      - name: Assemble test app debug APK
  #        run: ./gradlew assembleDebugAndroidTest
  #
  #      - name: Upload test APK
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: app-debug-androidTest
  #          path: app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk

  instrumentationTest:
    name: Run UI Tests in the emulator.
    needs: unitTest
    runs-on: macos-latest
    strategy:
      matrix:
        api-level: [ 30 ]

    steps:
      - uses: actions/checkout@v3
      - name: Gradle cache
        uses: gradle/gradle-build-action@v2

      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedCheck

  #  firebaseTestLab:
  #    name: Run UI test with Firebase Test Lab
  #    needs: provideTestApk
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: checkout
  #        uses: actions/checkout@v3
  #
  #      - name: Download APK
  #        uses: actions/download-artifact@v3
  #        with:
  #          name: app-debug
  #
  #      - name: Download test APK
  #        uses: actions/download-artifact@v3
  #        with:
  #          name: app-debug-androidTest
  #
  #

  #      - name: Setup Google Cloud SDK
  #        uses: google-github-actions/setup-gcloud@v0
  #        with:
  #          project_id: ${{ secrets.PROJECTID }}
  #          service_account_key: ${{ secrets.FIREBASEAUTH }}
  #          export_default_credentials: true
  #
  #      - name: Run instrumentation tests in Firebase Test Lab
  #        run: gcloud firebase test android run --type instrumentation --app app-debug.apk --test app-debug-androidTest.apk --device model=Pixel3,version=30,locale=en,orientation=portrait

  distribute:
    name: Distribute app bundle to Play Store
    needs: instrumentationTest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Update App Version
        uses: chkfung/android-version-actions@v1.1
        with:
          gradlePath: app/build.gradle
          versionCode: ${{ github.run_number }}

      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Assemble Release Bundle
        run: ./gradlew bundleRelease

      - name: Sign Release
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.ANDROIDKEYSTORE }}
          alias: ${{ secrets.KEYALIAS }}
          keyStorePassword: ${{ secrets.KEYSTOREPASSWORD }}
          keyPassword: ${{ secrets.KEYSTOREPASSWORD }}

      - name: Create service_account.json
        run: echo '${{ secrets.GOOGLESERVICEAPI }}' > service_account.json

      - name: Deploy to Alpha
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: service_account.json
          packageName: pz64.friends
          releaseFiles: app/build/outputs/bundle/release/app-release.aab
          track: internal
          status: draft
          whatsNewDirectory: whatsNew/
